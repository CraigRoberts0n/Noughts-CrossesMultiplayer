{"version":3,"sources":["components/Gamegrid/Square.js","App.js","components/Gamegrid/Board.js","components/Landing/Create.js","components/Landing/Join.js","components/Landing/ActiveRooms.js","components/Landing/Home.js","components/Reusable/SiteNavbar.js","components/Reusable/Footer.js","serviceWorker.js","index.js"],"names":["Square","socket","value","onClick","className","Board","location","useLocation","useState","Array","fill","squares","setSquares","xIsNext","setXIsNext","identifier","setIdentifier","name","setName","room","setRoom","turnPlayed","setTurnPlayed","id","opponent","setOpponent","errorMessage","setErrorMessage","isConnected","setIsConnected","gameStatus","setGameStatus","isFinished","setIsFinished","oppDisconnected","setOppDisconnected","variant","endGameMessage","endState","setEndState","useEffect","state","method","emit","on","oppID1","oppName1","oppID2","oppName2","renderSquare","i","updateSquares","slice","calculateWinner","handleClick","lines","length","a","b","c","reduce","n","x","winner","winningIdentifier","Alert","onClose","dismissible","Heading","Link","to","Container","Create","createStatus","setCreateStatus","pathname","Form","onSubmit","e","preventDefault","error","Group","Label","Control","type","placeholder","onChange","target","Button","Join","joinStatus","setJoinStatus","ActiveRooms","users","setUsers","callback","off","map","key","Home","Row","Col","xs","SiteNavbar","Navbar","bg","expand","Brand","role","aria-label","Footer","style","margin","io","connect","window","hostname","port","App","path","exact","component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d8092a0c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square({ value, onClick }) {\r\n  return (\r\n    <button className=\"square\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport io from 'socket.io-client';\n\n//Import CSS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n//Import Components\nimport Board from './components/Gamegrid/Board';\nimport Home from './components/Landing/Home';\nimport SiteNavbar from './components/Reusable/SiteNavbar';\nimport Footer from './components/Reusable/Footer';\n\nlet socket;\n\n//Endpoints for local dev \nconst ENDPOINT = 'localhost:5000';\n\n//Connect to Socket.io Server\nif (process.env.NODE_ENV === 'production') {\n  socket = io.connect(`${window.location.hostname}:${window.location.port}`);\n} else {\n  socket = io(`${window.location.hostname}:${window.location.port}`);\n}\n\nconst App = () => {\n  return (\n    <>\n    <Router>\n      <SiteNavbar />\n        <Route path=\"/\" exact component={() => <Home socket={socket} />} />\n        <Route path=\"/board\" component={() => <Board socket={socket} />} />\n      <Footer />\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\r\nimport { Alert, Container } from 'react-bootstrap';\r\nimport Square from './Square';\r\nimport { useLocation, Link } from 'react-router-dom'\r\n\r\nconst Board = ({ socket }) => {\r\n  const location = useLocation();\r\n  const [squares, setSquares] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [identifier, setIdentifier] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [turnPlayed, setTurnPlayed] = useState(false);\r\n  const [opponent, setOpponent] = useState({id: '', name: '', identifier: ''});\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const [isConnected, setIsConnected] = useState(false); //////////////////\r\n\r\n  const [gameStatus, setGameStatus] = useState('');\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [oppDisconnected, setOppDisconnected] = useState(false);\r\n\r\n  const [endState, setEndState] = useState({variant : '', endGameMessage: ''});\r\n\r\n  useEffect(() => {\r\n    //Get user Name, Room ID, and whether they Created or Joined Room \r\n    const { name, room, method } = location.state\r\n\r\n    //Set user name to state\r\n    setName(name);\r\n\r\n    //If user created the Game set dependant states\r\n    if(method === 'CREATE') {\r\n      setRoom(room);\r\n      setTurnPlayed(false)\r\n      setIsConnected(true)\r\n      setIdentifier('❌')\r\n    } else {\r\n      setRoom(room);\r\n      setTurnPlayed(true);\r\n      setIsConnected(true)\r\n      setIdentifier('⭕')\r\n      socket.emit('getOppDetails', { room }) //Asks server to supply both users with opponent details\r\n    }\r\n\r\n    return () => {\r\n      setIsConnected(false)  \r\n      \r\n      //On user exit of game, remove Room from server \r\n      socket.emit('removeRoom', { room })\r\n      socket.emit('disconnect', { room })  \r\n    }\r\n\r\n  }, [location, socket]);\r\n\r\n\r\n  useEffect(() => {\r\n    //Listens for server emit\r\n    socket.on('oppDetails', ( [ {id: oppID1 , name: oppName1}, {id: oppID2 , name: oppName2} ]) => {\r\n      setErrorMessage('')\r\n\r\n      //Sets the state of the oppenents ID, Name, and Identifier  \r\n      oppID1 !== socket.id \r\n        ? setOpponent({ id: oppID1, name: oppName1, identifier: '❌' }) \r\n        : setOpponent({ id: oppID2, name: oppName2, identifier: '⭕' })\r\n    })\r\n  }, [socket])\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on('userDisconnect', () => {\r\n      if (isConnected) {\r\n        setErrorMessage('Opponent Disconnected - Please Go Back to Home')\r\n        setOppDisconnected(true)\r\n      }\r\n    })\r\n  }, [socket, isConnected]);\r\n\r\n\r\n  useEffect(() => {\r\n    //Listens for server emit\r\n    //Updates the Game grid with the new grid data supplied by the opponent\r\n    socket.on('updateSquares', ({ squares, xIsNext }) => {\r\n      setErrorMessage('')\r\n      setSquares(squares);\r\n      setTurnPlayed(false)\r\n      setXIsNext(!xIsNext)\r\n    })\r\n  }, [turnPlayed, socket])\r\n\r\n\r\n  const handleClick = (i) => {\r\n    //When the user clicks on a Game Square\r\n    const updateSquares = squares.slice();\r\n\r\n    //Checks whether the Square clicked was a valid move dependant on Game state and Position\r\n    if (calculateWinner(updateSquares) || updateSquares[i] || turnPlayed || !opponent.name || isFinished || oppDisconnected){\r\n      //If invalid click, supplies the correct Error Message\r\n      if (updateSquares[i]) setErrorMessage('Selected different Square');\r\n      if (turnPlayed) setErrorMessage('Please Wait for Opponent to Play Turn');\r\n      if (!opponent.name) setErrorMessage('Please Wait for an Opponent to Join');\r\n      if (isFinished) setErrorMessage('Game is Finished, Go back to Homepage');\r\n      if (oppDisconnected) setErrorMessage('Opponent Disconnected - Please Go Back to Home')\r\n      return;\r\n    }\r\n\r\n    //Updates Game Grid with User Clicked Square\r\n    updateSquares[i] = xIsNext ? '❌' : '⭕';\r\n\r\n    //Updates State for Error Message, Game Grid, and Current X or O\r\n    setErrorMessage('');\r\n    setSquares(updateSquares);\r\n    setXIsNext(!xIsNext);\r\n\r\n    //Set played equal true, then emit updated Game Grid to server for opponent \r\n    setTurnPlayed(true);\r\n    socket.emit('turnPlayed', { name, room, updateSquares, xIsNext });\r\n  }\r\n\r\n  //Renders Game Square onto the display with onClick handler and unique identifier\r\n  const renderSquare = (i) => {\r\n    return <Square value={squares[i]} onClick={() => handleClick(i)} />;\r\n  }\r\n\r\n  //Calculate if user has winning State\r\n  const calculateWinner = (squares) => {\r\n    //Logic to check if Game grid is on Winning State\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return { 'winningIdentifier' : squares[a] }\r\n      }\r\n    }\r\n\r\n    //If all grid squares are not null, meaning game equals a tie\r\n    if (squares.reduce((n,x) => n + (x !== null), 0) === 9) {\r\n      return { 'winningIdentifier' : 'tie' }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  useEffect(() => {\r\n    //Check if State is Winning State\r\n    const winner = calculateWinner(squares);\r\n\r\n    //If winning state\r\n    if (winner){\r\n      //Set game state to isFinished\r\n      setIsFinished(true);\r\n\r\n      //If game is a tie, show Game Message\r\n      if (winner.winningIdentifier === 'tie') {\r\n        setEndState({ variant: 'warning', endGameMessage: 'Game is a Tie!' })\r\n      } else {\r\n        //If a user won, show Game Message with correct Message and Styling \r\n        winner.winningIdentifier === identifier \r\n        ? setEndState({ variant: 'success', endGameMessage: 'Winner Winner!' })\r\n        : setEndState({ variant: 'danger', endGameMessage: 'Hard Luck!' })\r\n      }\r\n      \r\n    } else {\r\n      //Update next user Identfier \r\n      setGameStatus(`Next player: ${xIsNext ? '❌' : '⭕'}`)\r\n    }\r\n  },[squares, xIsNext, identifier])\r\n\r\n  return (\r\n    <div>\r\n      {/* Error Message Bootstrap Alert Message */}\r\n      {errorMessage && (\r\n          <Alert variant='danger' onClose={() => setErrorMessage('')} dismissible>\r\n              <Alert.Heading>{ errorMessage }</Alert.Heading>\r\n          </Alert>\r\n      )}\r\n\r\n      {/* Game Finished Alert Message, dependent on Game Winner or Tie */}\r\n      { isFinished ? (\r\n        <Alert variant={endState.variant}>\r\n          <Alert.Heading>{ endState.endGameMessage } <Alert.Link><Link to=\"/\"> Go Back to Home </Link></Alert.Link></Alert.Heading>\r\n        </Alert>\r\n      ) : null }\r\n\r\n      {/* If no opponent has joined, display Alert */}\r\n      { opponent.name ? (\r\n        null\r\n      ) : <Alert variant=\"info\">\r\n            <Alert.Heading>Please Wait for an Opponent to Join</Alert.Heading>\r\n          </Alert> }\r\n\r\n\r\n      {/* Display game Info */}\r\n      <Container className=\"gameInfoContainer\">\r\n        <div>Room Identifier: <b>{ room }</b></div>\r\n\r\n        <div><p>Your Username: <b>{ name }</b> | Your Identifier { identifier } </p></div>\r\n\r\n        <div className=\"opp\">{opponent.name ? `Playing against ${opponent.name}` : null }</div>\r\n        \r\n        <div className=\"status\">{gameStatus}</div>\r\n      </Container>\r\n\r\n      {/* Show Game Grid */}\r\n      <Container className=\"gameBoard\">\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </Container>    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nconst Create = ({ name, setName, room, setRoom, socket, setErrorMessage }) => {\r\n    const [createStatus, setCreateStatus] = useState(false);\r\n\r\n    //onClick Handler\r\n    const onClick = (e) => {\r\n        //Prevent page refresh\r\n        e.preventDefault()\r\n\r\n        //Check if input is empty\r\n        if (!name) {\r\n            setErrorMessage('Enter all Fields')\r\n        } else {\r\n            //Emit to server to Create a new Game\r\n            socket.emit('create', { name }, ({ error, room }) => {\r\n                if (error) {\r\n                    setErrorMessage(error)\r\n                } else {\r\n                    setRoom(room);\r\n                    setCreateStatus(true)\r\n                }\r\n              });\r\n        }\r\n    }\r\n\r\n    //If true, Redirect to the Board Route passing state Data\r\n    if(createStatus) {\r\n        return <Redirect to={{\r\n            pathname: '/board',\r\n            state: { name, room, method: 'CREATE' }\r\n        }} />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Form onSubmit={onClick}>\r\n                <Form.Group>\r\n                    <Form.Label>Create</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter Name\" name={name} value={name} onChange={(e) => setName(e.target.value)} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Create Game\r\n                </Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Create;","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nconst Join = ({ name, setName, room, setRoom, socket, setErrorMessage}) => {\r\n    const [joinStatus, setJoinStatus] = useState(false);\r\n\r\n    //onClick Handler\r\n    const onClick = (e) => {\r\n        //Prevent page refresh\r\n        e.preventDefault()\r\n\r\n        //Check if inputs are empty\r\n        if (!name || !room) {\r\n            setErrorMessage('Enter all Fields')\r\n        } else {\r\n            //Emit to server to Join and existing game\r\n            socket.emit('join', { name, room }, ({error}) => {\r\n                error \r\n                ? setErrorMessage(error)\r\n                : setJoinStatus(true)\r\n            })\r\n        }\r\n    }\r\n\r\n    //If true, Redirect to the Board Route passing state Data\r\n    if(joinStatus) {\r\n        return <Redirect to={{\r\n            pathname: '/board',\r\n            state: { name, room, method: 'JOIN' }\r\n        }} />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Form onSubmit={onClick}>\r\n            <Form.Group>\r\n                <Form.Label>Join</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter Name\" name={name} value={name} onChange={(e) => setName(e.target.value)} />\r\n                <Form.Control type=\"text\" placeholder=\"Enter Room ID\" name={room} value={room} onChange={(e) => setRoom(e.target.value)} />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Join Game\r\n            </Button>\r\n\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Join","import React, { useEffect } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\n\r\nconst ActiveRooms = ({ socket, users, setUsers }) => {\r\n\r\n    useEffect(() => {\r\n        // Gets Active Rooms on Load\r\n        socket.emit('getActiveRooms', (callback) => {\r\n            setUsers(callback)\r\n        })\r\n\r\n        //Listens for Active Rooms Changes and updates\r\n        socket.on('updateActiveRooms', (callback) => {\r\n            setUsers(callback)\r\n        })\r\n\r\n        return () => {\r\n            socket.off();\r\n          }\r\n    }, [socket, setUsers])\r\n\r\n    return (\r\n        <Container>\r\n            {/* Display all Active Rooms */}\r\n            <u><p>Active Rooms</p></u>\r\n            {users.length > 0 \r\n            ? users.map(({room})=> (\r\n                    <div key={room}>\r\n                        {room}\r\n                  </div>\r\n                ))\r\n            : <p>There are no active Rooms</p>\r\n            }   \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ActiveRooms;","import React, { useState } from 'react';\r\nimport { Alert, Container, Row, Col } from 'react-bootstrap';\r\n\r\n//Import Components\r\nimport Create from './Create';\r\nimport Join from './Join';\r\nimport ActiveRooms from './ActiveRooms';\r\n\r\nconst Home = ({ socket }) => {\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [users, setUsers] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            {/* Display Error Message Alert */}\r\n            {errorMessage ? (\r\n                <Alert variant='danger' onClose={() => setErrorMessage('')} dismissible>\r\n                    <Alert.Heading>{ errorMessage }</Alert.Heading>\r\n                </Alert>\r\n            ) : null }\r\n\r\n            <Container className=\"mainHomeContainer\">\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"Create\">\r\n                            <Create socket={socket} name={name} setName={setName} room={room} setRoom={setRoom} setErrorMessage={setErrorMessage} />\r\n                        </div>\r\n                        <div className=\"Join\">\r\n                            <Join socket={socket} name={name} setName={setName} room={room} setRoom={setRoom} setErrorMessage={setErrorMessage} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={4}>\r\n                        <div className=\"ActiveRooms\">\r\n                            <ActiveRooms socket={socket} users={users} setUsers={setUsers}/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\nimport {Navbar} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SiteNavbar = () => {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Link to=\"/\"><Navbar.Brand>Noughts & Crosses - <span role=\"img\" aria-label=\"emoji\">❌ ⭕</span></Navbar.Brand></Link>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default SiteNavbar;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p style={{margin:\"4px\"}}>Craig Robertson</p>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}